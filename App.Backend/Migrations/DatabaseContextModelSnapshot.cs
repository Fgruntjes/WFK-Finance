// <auto-generated />
using System;
using App.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "user", "admin" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Backend.Data.Entity.CountryEntity", b =>
                {
                    b.Property<string>("Iso3")
                        .HasColumnType("text");

                    b.HasKey("Iso3");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.InstitutionConnectionAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InstitutionConnectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionConnectionId");

                    b.ToTable("InstitutionConnectionAccounts");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.InstitutionConnectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("InstitutionConnections");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.InstitutionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.OrganisationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.OrganisationUserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "OrganisationId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationUser");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CountryEntityInstitutionEntity", b =>
                {
                    b.Property<string>("CountriesIso3")
                        .HasColumnType("text");

                    b.Property<Guid>("InstitutionsId")
                        .HasColumnType("uuid");

                    b.HasKey("CountriesIso3", "InstitutionsId");

                    b.HasIndex("InstitutionsId");

                    b.ToTable("CountryInstitution");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.InstitutionConnectionAccountEntity", b =>
                {
                    b.HasOne("App.Backend.Data.Entity.InstitutionConnectionEntity", "InstitutionConnection")
                        .WithMany("Accounts")
                        .HasForeignKey("InstitutionConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstitutionConnection");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.InstitutionConnectionEntity", b =>
                {
                    b.HasOne("App.Backend.Data.Entity.InstitutionEntity", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Backend.Data.Entity.OrganisationEntity", "Organisation")
                        .WithMany("InstitutionConnections")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.OrganisationUserEntity", b =>
                {
                    b.HasOne("App.Backend.Data.Entity.OrganisationEntity", "Organisation")
                        .WithMany("Users")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Backend.Data.Entity.UserEntity", "User")
                        .WithMany("Organisations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CountryEntityInstitutionEntity", b =>
                {
                    b.HasOne("App.Backend.Data.Entity.CountryEntity", null)
                        .WithMany()
                        .HasForeignKey("CountriesIso3")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Backend.Data.Entity.InstitutionEntity", null)
                        .WithMany()
                        .HasForeignKey("InstitutionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Backend.Data.Entity.InstitutionConnectionEntity", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.OrganisationEntity", b =>
                {
                    b.Navigation("InstitutionConnections");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("App.Backend.Data.Entity.UserEntity", b =>
                {
                    b.Navigation("Organisations");
                });
#pragma warning restore 612, 618
        }
    }
}
