/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Institution
 */
export interface Institution {
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Institution
     */
    'logo': string;
}
/**
 * 
 * @export
 * @interface InstitutionConnection
 */
export interface InstitutionConnection {
    /**
     * 
     * @type {string}
     * @memberof InstitutionConnection
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof InstitutionConnection
     */
    'externalId': string;
    /**
     * 
     * @type {string}
     * @memberof InstitutionConnection
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof InstitutionConnection
     */
    'connectUrl': string;
}

/**
 * InstitutionApi - axios parameter creator
 * @export
 */
export const InstitutionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [country] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionList: async (country?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Institution`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstitutionApi - functional programming interface
 * @export
 */
export const InstitutionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstitutionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [country] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async institutionList(country?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Institution>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionList(country, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstitutionApi - factory interface
 * @export
 */
export const InstitutionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstitutionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [country] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionList(country?: string, options?: any): AxiosPromise<Array<Institution>> {
            return localVarFp.institutionList(country, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstitutionApi - object-oriented interface
 * @export
 * @class InstitutionApi
 * @extends {BaseAPI}
 */
export class InstitutionApi extends BaseAPI {
    /**
     * 
     * @param {string} [country] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionApi
     */
    public institutionList(country?: string, options?: AxiosRequestConfig) {
        return InstitutionApiFp(this.configuration).institutionList(country, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * InstitutionConnectionApi - axios parameter creator
 * @export
 */
export const InstitutionConnectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionConnectionList: async (start?: number, end?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/InstitutionConnection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstitutionConnectionApi - functional programming interface
 * @export
 */
export const InstitutionConnectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstitutionConnectionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async institutionConnectionList(start?: number, end?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstitutionConnection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.institutionConnectionList(start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstitutionConnectionApi - factory interface
 * @export
 */
export const InstitutionConnectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstitutionConnectionApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [start] 
         * @param {number} [end] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        institutionConnectionList(start?: number, end?: number, options?: any): AxiosPromise<Array<InstitutionConnection>> {
            return localVarFp.institutionConnectionList(start, end, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstitutionConnectionApi - object-oriented interface
 * @export
 * @class InstitutionConnectionApi
 * @extends {BaseAPI}
 */
export class InstitutionConnectionApi extends BaseAPI {
    /**
     * 
     * @param {number} [start] 
     * @param {number} [end] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstitutionConnectionApi
     */
    public institutionConnectionList(start?: number, end?: number, options?: AxiosRequestConfig) {
        return InstitutionConnectionApiFp(this.configuration).institutionConnectionList(start, end, options).then((request) => request(this.axios, this.basePath));
    }
}


