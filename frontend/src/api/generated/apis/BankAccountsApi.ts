/* tslint:disable */
/* eslint-disable */
/**
 * WFK Finance API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Bank,
  BankAccount,
  BankConnectResponse,
} from '../models';
import {
    BankFromJSON,
    BankToJSON,
    BankAccountFromJSON,
    BankAccountToJSON,
    BankConnectResponseFromJSON,
    BankConnectResponseToJSON,
} from '../models';

export interface BankConnectRequest {
    bankId?: string;
    returnUrl?: string;
}

export interface BankListRequest {
    countryCode?: string;
}

/**
 * 
 */
export class BankAccountsApi extends runtime.BaseAPI {

    /**
     */
    async bankAccountListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BankAccount>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Bank/Account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankAccountFromJSON));
    }

    /**
     */
    async bankAccountList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BankAccount>> {
        const response = await this.bankAccountListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async bankConnectRaw(requestParameters: BankConnectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankConnectResponse>> {
        const queryParameters: any = {};

        if (requestParameters.bankId !== undefined) {
            queryParameters['bankId'] = requestParameters.bankId;
        }

        if (requestParameters.returnUrl !== undefined) {
            queryParameters['returnUrl'] = requestParameters.returnUrl;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Bank/Connect`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankConnectResponseFromJSON(jsonValue));
    }

    /**
     */
    async bankConnect(requestParameters: BankConnectRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankConnectResponse> {
        const response = await this.bankConnectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async bankListRaw(requestParameters: BankListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Bank>>> {
        const queryParameters: any = {};

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Bank`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankFromJSON));
    }

    /**
     */
    async bankList(requestParameters: BankListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Bank>> {
        const response = await this.bankListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
