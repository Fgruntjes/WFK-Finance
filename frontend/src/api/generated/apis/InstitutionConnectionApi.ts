/* tslint:disable */
/* eslint-disable */
/**
 * App.Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    DeleteResponse,
    InstitutionConnection,
    InstitutionConnectionCreateRequest,
    InstitutionConnectionRefreshRequest,
    ListResponseOfInstitutionConnection,
} from '../models';
import {
    DeleteResponseFromJSON,
    InstitutionConnectionCreateRequestToJSON,
    InstitutionConnectionFromJSON,
    InstitutionConnectionRefreshRequestToJSON,
    ListResponseOfInstitutionConnectionFromJSON
} from '../models';
import * as runtime from '../runtime';

export interface CreateRequest {
    request: InstitutionConnectionCreateRequest;
}

export interface DeleteManyRequest {
    ids?: Array<string>;
}

export interface ListRequest {
    skip?: number;
    limit?: number;
}

export interface RefreshRequest {
    request: InstitutionConnectionRefreshRequest;
}

/**
 * 
 */
export class InstitutionConnectionApi extends runtime.BaseAPI {

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstitutionConnection>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/InstitutionConnection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstitutionConnectionCreateRequestToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionConnectionFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstitutionConnection> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteManyRaw(requestParameters: DeleteManyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteResponse>> {
        const queryParameters: any = {};

        if (requestParameters.ids) {
            queryParameters['Ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/InstitutionConnection`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteMany(requestParameters: DeleteManyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteResponse> {
        const response = await this.deleteManyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listRaw(requestParameters: ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseOfInstitutionConnection>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['Limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/InstitutionConnection`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseOfInstitutionConnectionFromJSON(jsonValue));
    }

    /**
     */
    async list(requestParameters: ListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseOfInstitutionConnection> {
        const response = await this.listRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async refreshRaw(requestParameters: RefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstitutionConnection>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling refresh.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/InstitutionConnection/Refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstitutionConnectionRefreshRequestToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstitutionConnectionFromJSON(jsonValue));
    }

    /**
     */
    async refresh(requestParameters: RefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstitutionConnection> {
        const response = await this.refreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
